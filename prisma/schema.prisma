// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  passes        Pass[]
  passSessions  PassSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pass {
  id           String        @id @default(cuid())
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  currentStars Int           @default(0)
  totalStars   Int           @default(0)
  sessions     PassSession[]
}

model SteamAccount {
  id        String        @id @default(cuid())
  steamId   String        @unique
  side      String // "CT" or "T"
  sessions  PassSession[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PassSession {
  id             String       @id @default(cuid())
  passId         String
  pass           Pass         @relation(fields: [passId], references: [id], onDelete: Cascade)
  steamAccountId String
  steamAccount   SteamAccount @relation(fields: [steamAccountId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  starsStart     Int
  starsEnd       Int
  startDate      DateTime
  completeDate   DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
